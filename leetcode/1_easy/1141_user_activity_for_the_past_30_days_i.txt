Table: Activity

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| session_id    | int     |
| activity_date | date    |
| activity_type | enum    |
+---------------+---------+
There is no primary key for this table, it may have duplicate rows.
The activity_type column is an ENUM of type ('open_session', 'end_session', 'scroll_down', 'send_message').
The table shows the user activities for a social media website. 
Note that each session belongs to exactly one user.
 

Write an SQL query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Activity table:
+---------+------------+---------------+---------------+
| user_id | session_id | activity_date | activity_type |
+---------+------------+---------------+---------------+
| 1       | 1          | 2019-07-20    | open_session  |
| 1       | 1          | 2019-07-20    | scroll_down   |
| 1       | 1          | 2019-07-20    | end_session   |
| 2       | 4          | 2019-07-20    | open_session  |
| 2       | 4          | 2019-07-21    | send_message  |
| 2       | 4          | 2019-07-21    | end_session   |
| 3       | 2          | 2019-07-21    | open_session  |
| 3       | 2          | 2019-07-21    | send_message  |
| 3       | 2          | 2019-07-21    | end_session   |
| 4       | 3          | 2019-06-25    | open_session  |
| 4       | 3          | 2019-06-25    | end_session   |
+---------+------------+---------------+---------------+
Output: 
+------------+--------------+ 
| day        | active_users |
+------------+--------------+ 
| 2019-07-20 | 2            |
| 2019-07-21 | 2            |
+------------+--------------+ 
Explanation: Note that we do not care about days with zero active users.


# Write your MySQL query statement below

note that period of 30 days ending 2019-07-27 inclusively means -29 days FROM end date of 2019-07-27

SELECT activity_date AS day, 
    COUNT(DISTINCT user_id) AS active_users
FROM (
    SELECT *
    FROM Activity
    WHERE activity_date BETWEEN DATE_ADD('2019-07-27', INTERVAL - 29 DAY) 
        AND '2019-07-27'
) s
GROUP BY activity_date

-- better approach below. 

SELECT activity_date AS day ,
COUNT(DISTINCT user_id) AS active_users
FROM Activity
WHERE activity_date BETWEEN DATE_ADD('2019-07-27', INTERVAL - 29 DAY) 
    AND '2019-07-27'
GROUP BY activity_date;


Note: 

The DATE_ADD function in SQL is used to add a specified time interval to a date. It is commonly used in MySQL, PostgreSQL, and other SQL-based databases to manipulate date and time data.

DATE_ADD(date, INTERVAL value unit)

•	date: The starting date or datetime value to which the interval is to be added.
•	value: The number of units to add.
•	unit: The unit of the interval to add, such as DAY, MONTH, YEAR, HOUR, MINUTE, etc.

Examples

1.	Add Days to a Date

SELECT DATE_ADD('2024-07-22', INTERVAL 10 DAY);

•	Result: '2024-08-01'
•	This query adds 10 days to the date 2024-07-22.

2.	Add Months to a Date

SELECT DATE_ADD('2024-07-22', INTERVAL 2 MONTH);

•	Result: '2024-09-22'
•	This query adds 2 months to the date 2024-07-22.

3.	Add Years to a Date

SELECT DATE_ADD('2024-07-22', INTERVAL 1 YEAR);

•	Result: '2025-07-22'
•	This query adds 1 year to the date 2024-07-22.
